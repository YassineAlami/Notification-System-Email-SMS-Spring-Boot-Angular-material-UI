package org.sid.notificationservice.model;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import javax.persistence.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
@Entity
@Table(name = "deliveries") // Specifies the table name in the database
@Data // Lombok annotation to generate getters, setters, toString, and other utility methods
@AllArgsConstructor // Lombok annotation to generate a constructor with all fields
@NoArgsConstructor // Lombok annotation to generate a no-argument constructor
@Builder // Lombok annotation to provide a builder pattern for this class
public class Delivery {

    @Id // Marks this field as the primary key
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Specifies that the ID should be generated by the database
    private Long id; // Unique identifier for the delivery

    private String name; // Name of the delivery
    private String state = "-"; // State of the delivery, defaulting to "-"

    private Date creationDate; // Date when the delivery was created
    private Date deliveryDate; // Date when the delivery was actually made
    private Date estimatedDeliveryDate; // Estimated date for when the delivery is expected

    @ManyToOne // Defines a many-to-one relationship with DeliveryMethod
    @JoinColumn(name = "delivery_method_id") // Specifies the foreign key column in the deliveries table
    private DeliveryMethod deliveryMethod; // Associated delivery method for this delivery

    @OneToMany(mappedBy = "delivery", cascade = CascadeType.ALL) // Defines a one-to-many relationship with Notification
    private List<Notification> notifications = new ArrayList<>(); // List of notifications associated with this delivery

    @PrePersist // Method to be executed before persisting this entity to the database
    private void prePersist() {
        // Sets the state to "-" if it is null before the delivery is saved
        if (this.state == null) {
            this.state = "-";
        }
    }
}
